stages:
  - setup
  - check
  - build-check
  - release-build
  - package
  - deploy

# prevent duplicate pipelines for merge request
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

variables:
  RUST_MIN_VERSION: "1.77-buster"
  RUST_REL_VERSION: "1.79-buster"
  LINUX_RUSTIMG: "docker.io/library/rust:${RUST_VERSION}"
  PKG_ROOT: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

.build-template:
  stage: build-check
  script:
    - cargo build ${FEATURES} ${CARGO_FLAGS}
    # make sure build introduces no diffs
    # FIXME cannot be set there yet since we need a patch for FreeBSD
    #- git diff --exit-code

.debian-build-template:
  extends:
    - .build-template
  image: ${LINUX_RUSTIMG}
  before_script:
    - apt-get update
    - apt-get install -y llvm-dev clang libxen-dev

# FIXME does not allow to pin a toolchain version
.cross-build-template:
  extends:
    - .build-template
  image: ghcr.io/cross-rs/$CARGO_BUILD_TARGET:main
  before_script:
    # install Rust
    - curl --silent --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
    - . "$HOME/.cargo/env"
    - rustup target add $CARGO_BUILD_TARGET

.cross-freebsd13-x86_64-build-template:
  extends:
    - .cross-build-template
  variables:
    CARGO_BUILD_TARGET: "x86_64-unknown-freebsd"
    CROSS_SYSROOT: "/usr/local/x86_64-unknown-freebsd13"
  before_script:
    - !reference [.cross-build-template,before_script]
    # cross sysroot does not match its toolchain
    - mkdir -p $CROSS_SYSROOT/usr
    - ln -s ../include $CROSS_SYSROOT/usr/include
    - ln -s ../lib $CROSS_SYSROOT/usr/lib
    # link will not look for the proper libs otherwise
    - export RUSTFLAGS="-L$CROSS_SYSROOT/usr/lib"
    # build dependencies
    - export FREEBSD_MIRROR=$(/freebsd-fetch-best-mirror.sh)
    - /freebsd-setup-packagesite.sh
    - /freebsd-install-package.sh xen-tools

.cross-windows-build-template:
  extends:
    - .cross-build-template
  variables:
    CARGO_BUILD_TARGET: "x86_64-pc-windows-gnu"

.cross-linux-aarch64-build-template:
  extends:
    - .cross-build-template
  variables:
    CARGO_BUILD_TARGET: "aarch64-unknown-linux-gnu"
    BINDGEN_EXTRA_CLANG_ARGS_aarch64_unknown_linux_gnu: "--sysroot=/usr/aarch64-linux-gnu -idirafter/usr/include"

.only-scheduled:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

.not-scheduled:
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

## quick checks

clippy:
  stage: check
  extends:
    - .debian-build-template
  variables:
    RUST_VERSION: "latest"
  before_script:
    - !reference [.debian-build-template,before_script]
    - rustup component add clippy
  script:
    - cargo clippy

cargo-lock:
  stage: check
  extends:
    - .debian-build-template
  variables:
    RUST_VERSION: "${RUST_REL_VERSION}"
  script:
    - cargo tree
    # if Cargo.lock was not commited, this will show here
    - git diff --exit-code

## common defs

.featurematrix:
  parallel:
    matrix:
      - FEATURES:
          - ""
          - "--no-default-features"
          - "--no-default-features -F xenstore"
          - "--no-default-features -F net_netlink"
          - "--no-default-features -F net_pnet"
          #
          - "--no-default-features -F xenstore,static"
          - "-F static"

.featurematrix.no-netlink:
  parallel:
    matrix:
      - FEATURES:
          - "--no-default-features"
          - "--no-default-features -F xenstore"
          - "--no-default-features -F net_pnet"
          - "--no-default-features -F xenstore,net_pnet"
          ## this matrix is only by FreeBSD today, and we cannot link
          ## statically on FreeBSD because libxenstore is not built as PIE
          #- "--no-default-features -F xenstore,static"
          #- "--no-default-features -F xenstore,static,net_pnet"

## standard jobs building with shipped Cargo.lock

env-setup:
  stage: setup
  image: docker.io/library/alpine:latest
  before_script:
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
          apk add git
      fi
  script:
    - |
      case "$CI_COMMIT_REF_NAME" in
      main) UPSTREAMVERSION=$(git describe)
            TILDEVERSION=$UPSTREAMVERSION
            RPMVERSION=$(echo $UPSTREAMVERSION | tr "-" "+")
            ;;
      *)    UPSTREAMVERSION=$(awk -F'"' < Cargo.toml '/^\[/ { pkg=0 }; /^\[package\]$/ { pkg=1 }; /^version = "(.*)"/ { if (pkg) print $2 }')
            # both DEB and RPM use "~" to sort pre-releases before releases
            TILDEVERSION=$(echo $UPSTREAMVERSION | tr "-" "~")
            RPMVERSION=$TILDEVERSION
            ;;
      esac
    # update channel must be the same for matching packaging and deploy
    # jobs, set it once globally
    - |
      case "${CI_COMMIT_TAG}" in
      "") UPDATE_CHANNEL="${CI_COMMIT_REF_NAME}" ;;
      *-*) UPDATE_CHANNEL="testing" ;;
      *) UPDATE_CHANNEL="release" ;;
      esac

    - echo "UPDATE_CHANNEL=${UPDATE_CHANNEL}" > version.env
    - echo "UPSTREAMVERSION=${UPSTREAMVERSION}" >> version.env
    - echo "TILDEVERSION=${TILDEVERSION}" >> version.env
    - echo "RPMVERSION=${RPMVERSION}" >> version.env

    - cat version.env

  artifacts:
    reports:
      # propagates variables into the pipeline level
      dotenv: version.env

build-linux-everycommit:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  parallel: !reference [.featurematrix,parallel]
  extends:
    - .debian-build-template
  variables:
    CARGO_FLAGS: "-v"
    RUST_VERSION: "${RUST_MIN_VERSION}"
  before_script:
    - printf "\e[0Ksection_start:$(date +%s):before_script[collapsed=true]\r\e[0K\e[1;33mBuild setup\e[1;0m\n"
    - !reference [.debian-build-template,before_script]
    - printf "\e[0Ksection_end:$(date +%s):before_script\r\e[0K\n"
  script:
    # let git-rebase run the build for each commit, but not fail with
    # commit subject starts with "WIP" (gitlab also uses this string
    # to switch a PR back to draft, mitigating the risk to push a
    # failing commit)
    - git rebase --rebase-merges $CI_MERGE_REQUEST_DIFF_BASE_SHA
      --exec 'devscripts/gitlab-ci-runbuild.sh cargo build ${FEATURES} ${CARGO_FLAGS} && git status'
  after_script:
    # since Git Strategy is "fetch", avoid poluting subsequent runs
    # (but as of v16.9 it still won't be run on timeout or cancel)
    - git rebase --abort || true

build-linux:
  parallel: !reference [.featurematrix,parallel]
  extends:
    - .debian-build-template
  variables:
    CARGO_FLAGS: "-v"
    RUST_VERSION: "${RUST_MIN_VERSION}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      # building branch tip already included in 'everycommit'
      when: never
    - !reference [.not-scheduled,rules]

build-release-linux-x86_64:
  stage: release-build
  extends:
    - .debian-build-template
    - .not-scheduled
  variables:
    FEATURES: "-F static"
    CARGO_FLAGS: "--release"
    RUST_VERSION: "${RUST_REL_VERSION}"
  artifacts:
    paths:
      - target/release/xen-guest-agent

build-freebsd13-x86_64:
  parallel: !reference [.featurematrix.no-netlink,parallel]
  extends:
    - .cross-freebsd13-x86_64-build-template
    - .not-scheduled
  variables:
    CARGO_FLAGS: "-v"

build-freebsd13-netlink-x86_64:
  variables:
    FEATURES: ""
  extends:
    - .cross-freebsd13-x86_64-build-template
    - .not-scheduled
  variables:
    CARGO_FLAGS: "-v"
  before_script:
    - !reference [.cross-freebsd13-x86_64-build-template,before_script]
    - mkdir .cargo
    - cp devscripts/cargo-freebsd-netlink.toml .cargo/config.toml
    - cargo update -p libc -p rtnetlink
  after_script:
    # since Git Strategy is "fetch", avoid poluting subsequent runs
    # (but as of v16.9 it still won't be run on timeout or cancel)
    - git checkout HEAD Cargo.toml
  artifacts:
    paths:
      - target/x86_64-unknown-freebsd/debug/xen-guest-agent

build-release-freebsd13-x86_64:
  stage: release-build
  extends:
    - .cross-freebsd13-x86_64-build-template
    - .not-scheduled
  variables:
    FEATURES: "--no-default-features -F xenstore,net_pnet"
    CARGO_FLAGS: "--release"
  artifacts:
    paths:
      - target/x86_64-unknown-freebsd/release/xen-guest-agent

build-windows-x86_64:
  extends:
    - .cross-windows-build-template
    - .not-scheduled
  variables:
    CARGO_FLAGS: "-v"
    FEATURES: "--no-default-features"
  artifacts:
    paths:
      - target/x86_64-pc-windows-gnu/debug/xen-guest-agent.exe

build-linux-aarch64:
  parallel: !reference [.featurematrix,parallel]
  extends:
    - .cross-linux-aarch64-build-template
    - .not-scheduled
  variables:
    CARGO_FLAGS: "-v"
  before_script:
    - !reference [.cross-build-template,before_script]
    - dpkg --add-architecture arm64
    - apt-get update
    - apt-get install -y libxen-dev:arm64

## continuous checking against most recent dependencies (also on push/PR)

build-latest-linux:
  parallel: !reference [.featurematrix,parallel]
  extends:
    - .debian-build-template
  variables:
    CARGO_FLAGS: "-v"
    RUST_VERSION: "${RUST_MIN_VERSION}"
  before_script:
    - !reference [".debian-build-template", "before_script"]
    - mv Cargo.lock Cargo.lock.current
  after_script:
    # show which dependencies changed in Cargo.lock
    - git diff
    # since Git Strategy is "fetch", avoid poluting subsequent runs
    # (but as of v16.9 it still won't be run on timeout or cancel)
    - git checkout HEAD Cargo.toml

build-latest-freebsd13-x86_64:
  parallel: !reference [.featurematrix.no-netlink,parallel]
  extends:
    - .cross-freebsd13-x86_64-build-template
  variables:
    CARGO_FLAGS: "-v"
  before_script:
    - !reference [".cross-freebsd13-x86_64-build-template", "before_script"]
    - mv Cargo.lock Cargo.lock.current
  after_script:
    # show which dependencies changed in Cargo.lock
    - git diff
    # since Git Strategy is "fetch", avoid poluting subsequent runs
    # (but as of v16.9 it still won't be run on timeout or cancel)
    - git checkout HEAD Cargo.toml

## source packaging

pkg-source:
  stage: package
  image: ${LINUX_RUSTIMG}
  variables:
    RUST_VERSION: "latest"
  extends:
    - .not-scheduled
  needs:
    - env-setup
  script:
    - cargo package --no-verify
    - CRATEFILE=$(basename target/package/xen-guest-agent-*.crate)
    - mv target/package/${CRATEFILE} target/package/${CRATEFILE%.crate}.tar.gz
  artifacts:
    paths:
      - target/package/*.tar.gz

## packaging from binary artifacts

pkg-deb-amd64:
  stage: package
  image: docker.io/library/debian:10
  extends:
    - .not-scheduled
  needs:
    - env-setup
    - build-release-linux-x86_64
  before_script:
    - apt update
    - apt install -y build-essential debhelper apt-utils
    - dpkg-checkbuilddeps
  script:
    - >-
      sed < debian/changelog.in > debian/changelog
      -e "s/@@VERSION@@/$TILDEVERSION/"
      -e "s/@@AUTHOR@@/$GITLAB_USER_NAME <$GITLAB_USER_EMAIL>/"
      -e "s/@@DATE@@/$(date --rfc-822)/"
    - fakeroot debian/rules binary AGENT_BINARY="target/release/xen-guest-agent"
    - mv -v ../*.deb target/release/

    # repository metadata
    - cd target/release

    # mangle names to avoid chars rejected by the gitlab package registry,
    # see https://gitlab.com/gitlab-org/gitlab/-/issues/413517
    - |
      if [ "${UPSTREAMVERSION}" != "${TILDEVERSION}" ]; then
          for FILE in *.deb; do
              mv $FILE $(echo $FILE | tr "~" "-")
          done
      fi

    - apt-ftparchive generate ../../apt-ftparchive.conf

    # post-processing so we can use `deb https://...generic/deb-amd64/ main/`
    - 'sed -i "s,^Filename: ./,Filename: ${UPDATE_CHANNEL}/," Packages'

    - apt-ftparchive release .
      -o APT::FTPArchive::Release::Description="xen-guest-agent CI packages for ${UPDATE_CHANNEL}"
      -o APT::FTPArchive::Release::Label="xen-guest-agent-ci"
      -o APT::FTPArchive::Release::Suite="${UPDATE_CHANNEL}"
      > Release.part
    - mv Release.part Release
  artifacts:
    paths:
      - target/release/*.deb
      - target/release/*Release*
      - target/release/Packages*
      - target/release/Contents-*

# The artifact repo does not seem to work well as an APT source, APT
# gets HTP 400 on Packages for some reason, so deploy it to a package
# repository instead.
deploy-deb-amd64:
  stage: deploy
  extends:
    - .not-scheduled
  needs:
    - env-setup
    - pkg-deb-amd64
  image: docker.io/curlimages/curl:latest
  script:
    - cd target/release
    - for FILE in *; do
    -   echo "uploading '$FILE'"
    -   >
        curl --silent --header "JOB-TOKEN: $CI_JOB_TOKEN"
        --upload-file "$FILE"
        "${PKG_ROOT}/deb-amd64/${UPDATE_CHANNEL}/${FILE}"
    - done

pkg-rpm-x86_64:
  stage: package
  image: registry.fedoraproject.org/fedora:37
  extends:
    - .not-scheduled
  needs:
    - env-setup
    - build-release-linux-x86_64
  before_script:
    - dnf install -y rpm-build dnf-utils
    - mkdir SOURCES
    - ln -sr target/release/xen-guest-agent SOURCES/
    - ln -sr startup/xen-guest-agent.service SOURCES/
    - >-
      sed  < xen-guest-agent.spec.in > xen-guest-agent.spec
      -e "s/@@UPSTREAMVERSION@@/$UPSTREAMVERSION/"
      -e "s/@@VERSION@@/$RPMVERSION/"
      -e "s/@@AUTHOR@@/$GITLAB_USER_NAME <$GITLAB_USER_EMAIL>/"
      -e "s/@@DATE@@/$(date +'%a %b %d %Y')/"
    - dnf builddep xen-guest-agent.spec -y
  script:
    - 'rpmbuild -bb xen-guest-agent.spec --define "_topdir $(pwd)"'
  artifacts:
    paths:
      - RPMS/*/*.rpm
